## Setup Cheetah compiler placeholder delimiter to '@' instead of the default
## '$' to prevent from conflicting with makefile syntax.
#compiler-settings
cheetahVarStartToken = @
#end compiler-settings
## Lines up to (and including) this one will get discarded from final output.
#set @module = @getVar('MODULE')
#set @MODULE = @module.upper()
include $(CRAFTERDIR)/core/module.mk
include $(CRAFTERDIR)/core/meson.mk

# Module depends: 
# - add module name for mandatory depends
# - use optional_depends function for optional depends
# $(call gen_module_depends, @(module) \
#                            $(call optional_depends,@(module)))
$(call gen_module_depends, )

# Interrupt processing if platform specified no source tree.
$(call dieon_undef_or_empty,@(MODULE)_SRCDIR)
# Interrupt processing if platform specified no configure arguments or
# environment
$(call dieon_undef_or_empty,@(MODULE)_TARGET_TOOLCHAIN_INI)
$(call dieon_undef_or_empty,@(MODULE)_TARGET_FAMILY)
$(call dieon_undef_or_empty,@(MODULE)_TARGET_CPU)
$(call dieon_undef_or_empty,@(MODULE)_TARGET_ENDIAN)
$(call dieon_undef_or_empty,@(MODULE)_TARGET_CONFIGURE_ENV)
$(call dieon_undef_or_empty,@(MODULE)_TARGET_CONFIGURE_ARGS)
# Interrupt processing if platform specified no install arguments
$(call dieon_undef_or_empty,@(MODULE)_TARGET_INSTALL_ARGS)

# Location of staged.
@(module)_staging_dir := $(abspath $(stagingdir)$(@(MODULE)_TARGET_PREFIX))

# Location of bundled.
@(module)_bundle_dir := $(bundle_rootdir)$(@(MODULE)_TARGET_PREFIX)

#raw
################################################################################
# This module help message
################################################################################
#end raw

define module_help
Build and install @(module), a ...

Source
======
  https://...

Configuration variable
======================
@(MODULE)_SRCDIR
  Path to source directory tree
  $(call help_render_vars,$(@(MODULE)_SRCDIR))

@(MODULE)_TARGET_PREFIX
  Path to architecture-independent files install root directory
  $(call help_render_vars,$(@(MODULE)_TARGET_PREFIX))

@(MODULE)_TARGET_CONFIGURE_ENV
  Environment passed to meson tool at configure time
  $(call help_render_vars,$(@(MODULE)_TARGET_CONFIGURE_ENV))

@(MODULE)_TARGET_CONFIGURE_ARGS
  Arguments passed to meson tool at configure time
  $(call help_render_vars,$(@(MODULE)_TARGET_CONFIGURE_ARGS))

@(MODULE)_TARGET_INSTALL_ARGS
  Arguments passed to meson at install time
  $(call help_render_vars,$(@(MODULE)_TARGET_INSTALL_ARGS))

Installed
=========
binary::
$(call help_install_files,$(@(MODULE)_TARGET_PREFIX)/bin,@(module))

Shared library::
$(call help_install_files,$(@(MODULE)_TARGET_PREFIX)/lib,lib@(module).so)

Bundled
=======
binary::
$(call help_bundle_files,$(@(MODULE)_TARGET_PREFIX)/bin,@(module))

Shared library::
$(call help_bundle_files,$(@(MODULE)_TARGET_PREFIX)/lib,lib@(module).so)
endef

#raw
################################################################################
# Configuration logic
################################################################################
#end raw

$(call meson_gen_ini_rules, \
       @(MODULE)_TARGET_TOOLCHAIN_INI, \
       @(MODULE)_TARGET_FAMILY, \
       @(MODULE)_TARGET_CPU, \
       @(MODULE)_TARGET_ENDIAN)

define @(module)_configure_recipe
$(Q)$(call meson_target_setup, \
           $(@(MODULE)_SRCDIR), \
           $(@(MODULE)_TARGET_CONFIGURE_ENV), \
           $(@(MODULE)_TARGET_CONFIGURE_ARGS) \
           --includedir=/usr/include \
           --datadir=/usr/share)
endef

$(call meson_gen_config_rules,@(module)_configure_recipe)

#raw
################################################################################
# Build logic
################################################################################
#end raw

define @(module)_build_recipe
$(Q)$(call meson_target_run,compile,$(@(MODULE)_TARGET_CONFIGURE_ENV))
endef

$(call meson_gen_build_rule,@(module)_build_recipe)

#raw
################################################################################
# Clean logic
################################################################################
#end raw

define @(module)_clean_recipe
$(Q)$(call meson_target_run,compile,$(@(MODULE)_TARGET_CONFIGURE_ENV),--clean)
endef

$(call meson_gen_clean_rule,@(module)_clean_recipe)

#raw
################################################################################
# Install logic
################################################################################
#end raw

define @(module)_install_recipe
$(Q)$(call meson_target_run,install,$(@(MODULE)_TARGET_CONFIGURE_ENV),$(@(MODULE)_TARGET_INSTALL_ARGS))
endef

$(call meson_gen_install_rule,@(module)_install_recipe)

#raw
################################################################################
# Uninstall logic
################################################################################
#end raw

define @(module)_uninstall_recipe
$(Q)$(NINJA) -C $(module_builddir) uninstall
endef

$(call meson_gen_uninstall_rule,@(module)_uninstall_recipe)

#raw
################################################################################
# Bundle logic
################################################################################
#end raw

define @(module)_bundle_recipe
$(Q)$(call bundle_bin_cmd, \
           $(@(module)_staging_dir)/bin/@(module), \
           $(bundle_rootdir)/bin)
$(Q)$(call bundle_lib_cmd, \
           $(@(module)_staging_dir)/lib/lib@(module).so, \
           $(bundle_rootdir)/lib)
endef

$(call meson_gen_bundle_rule,@(module)_bundle_recipe)

#raw
################################################################################
# Drop logic
################################################################################
#end raw

define @(module)_drop_recipe
$(Q)$(call drop_cmd,$(@(module)_bundle_dir)/bin/@(module))
$(Q)$(call drop_lib_cmd, \
           $(stagingdir)/lib/lib@(module).so, \
           $(@(module)_bundle_dir)/lib)
endef

$(call meson_gen_drop_rule,@(module)_drop_recipe)
